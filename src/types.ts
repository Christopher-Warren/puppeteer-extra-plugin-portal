/* eslint-disable @typescript-eslint/triple-slash-reference */
/// <reference path="./puppeteer-mods.d.ts" />
// Warn: The above is EXTREMELY important for our custom page mods to be recognized by the end users typescript!

import { ServerOptions } from 'https';
import type { ListenOptions } from 'net';

// Warn: The above is EXTREMELY important for our custom page mods to be recognized by the end users typescript!

export type PortalPluginPageAdditions = {
  openPortal: () => Promise<string>;

  closePortal: () => Promise<void>;
};

export interface WebPortalConnectionConfig {
  /**
   * The URL base that will be returned when creating a portal
   * @example 'https://portal.example.com'
   * @default 'http://localhost:3000'
   */
  baseUrl?: string;

  /**
   * Node Net.listen options: https://nodejs.org/api/net.html#net_server_listen_options_callback
   * @default listenOpts.port: 3000
   */
  listenOpts?: ListenOptions;

  /**
   * Node HTTPS.createServer options: https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
   */
  serverOpts?: ServerOptions;
}

export interface ChromiumRemoteDebuggingConnectionConfig {
  /**
   * The URL base that will be used by the portal UI to communicate with the remote browser
   * @example 'wss://ws.example.com'
   * @default The URL generated by the remote debugger, which is a combination of the address and port provided
   */
  baseUrl?: string;

  /**
   * You probably don't need this.
   * Use the given address instead of the default loopback for accepting remote debugging connections.
   * Should be used together with --remote-debugging-port. Note that the remote debugging protocol
   * does not perform any authentication, so exposing it too widely can be a security risk.
   * @default '127.0.0.1'
   */
  address?: string;

  /**
   * Enables remote debug over HTTP on the specified port.
   * @default Randomly generated by Chromium
   */
  port?: number;
}

export interface PluginOptions {
  /** Example */
  foo: boolean;

  /**
   * Server configs for the webserver hosting the UI that the user accesses to interact with the portal
   */
  webPortalConfig?: WebPortalConnectionConfig;

  /**
   * Server configs for the Chromium remote debugging instance
   */
  webSocketConfig?: ChromiumRemoteDebuggingConnectionConfig;
}

export interface WebSocketParts {
  hostname: string;
  port: string;
  id: string;
  protocol: string;
}
